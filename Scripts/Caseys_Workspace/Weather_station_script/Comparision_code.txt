import pandas as pd
import os
from datetime import datetime
import logging

# Setup logging
logging.basicConfig(
    filename='data_processing.log',
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S'
)

def process_file(file_path):
    # Load the data from the file
    xls = pd.ExcelFile(file_path)
    
    # Select a sheet that contains valid data, this might vary by station
    for sheet_name in xls.sheet_names:
        if 'data' in sheet_name.lower() or 'wx' in sheet_name.lower():
            df = xls.parse(sheet_name)
            return df
    return None

def combine_files(directory, start_date, end_date):
    combined_df = pd.DataFrame()  # Empty DataFrame to append data to
    
    for root, dirs, files in os.walk(directory):
        for file_name in files:
            if file_name.endswith('.xlsx'):
                file_path = os.path.join(root, file_name)
                logging.info(f"Processing file: {file_path}")
                
                # Extract the date from the file name
                extracted_date = extract_date_from_filename(file_name)
                if extracted_date:
                    # Check if the date is within the range
                    if start_date <= extracted_date <= end_date:
                        df = process_file(file_path)
                        if df is not None:
                            logging.info(f"File shape: {df.shape}")
                            combined_df = pd.concat([combined_df, df], ignore_index=True)
                        else:
                            logging.warning(f"No valid data found in {file_path}")
    
    return combined_df

def extract_date_from_filename(file_name):
    # Try different patterns to extract the date from the filename
    for date_format in ("%m.%d.%Y", "%Y-%m-%d", "%m-%d-%Y"):
        try:
            extracted_date = datetime.strptime(file_name, date_format)
            logging.info(f"Successfully extracted date: {extracted_date}")
            return extracted_date
        except ValueError:
            continue
    logging.error(f"Failed to extract date from {file_name}")
    return None

# Main script execution
if __name__ == "__main__":
    station_name = input("Enter the weather station name (e.g., 1311_Poloa): ")
    start_date_str = input("Enter the start date (YYYY-MM-DD): ")
    end_date_str = input("Enter the end date (YYYY-MM-DD): ")
    
    # Convert input dates to datetime objects
    start_date = datetime.strptime(start_date_str, "%Y-%m-%d")
    end_date = datetime.strptime(end_date_str, "%Y-%m-%d")
    
    input_directory = f'C:/Users/ctebe/OneDrive/Desktop/GitHub Repositories/Hydro_Monitoring_Network_ASPA-UH/Final_Historical_Data/Weather_Stations/{station_name}'
    output_file = f'C:/Users/ctebe/OneDrive/Desktop/GitHub Repositories/Hydro_Monitoring_Network_ASPA-UH/Final_Historical_Data/{station_name}_combined_output_single_sheet.xlsx'
    
    logging.info(f"Processing files in directory: {input_directory}")
    
    # Combine files in the directory
    combined_df = combine_files(input_directory, start_date, end_date)
    
    # Check the shape and preview the data before saving
    print(f"Combined DataFrame shape: {combined_df.shape}")
    print(f"First few rows of the combined data:\n{combined_df.head()}")
    print(f"Last few rows of the combined data:\n{combined_df.tail()}")
    
    # Save the combined data to Excel
    try:
        combined_df.to_excel(output_file, index=False, engine='openpyxl')
        logging.info(f"Data successfully saved to {output_file}")
        print(f"Data successfully saved to {output_file}")
    except Exception as e:
        logging.error(f"Error saving data: {e}")
        print(f"Error saving data: {e}")
